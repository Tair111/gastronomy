<?php

namespace app\controllers;

use app\models\Dish;
use app\models\Dishingredientlink;
use app\models\Ingredient;
use Yii;
use yii\data\ActiveDataProvider;
use yii\data\ArrayDataProvider;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\filters\VerbFilter;
use app\models\LoginForm;

class SiteController extends Controller
{

    //////////////////////////////////////////////////////////////
    //////////////////////////// ADMIN ///////////////////////////
    //////////////////////////////////////////////////////////////

    public function actionAdminpanel()
    {
        if(Yii::$app->user->isGuest || !Yii::$app->user->identity->isAdmin)
            $this->redirect(Yii::$app->urlManager->createUrl('site/index'));

        return $this->render('admin/adminpanel');
    }

    public function actionDish_ingredients()
    {
        if(Yii::$app->user->isGuest || !Yii::$app->user->identity->isAdmin)
            $this->redirect(Yii::$app->urlManager->createUrl('site/index'));

        $dish_id = Yii::$app->request->get('dish_id');
        if ($dish_id == null) {
            $redirect_url = Yii::$app->urlManager->createUrl('dish/index');
            return $this->redirect($redirect_url);
        }
        $dish = Dish::find()->where(['id' => $dish_id])->one();
        $ingredients_for_dish = $dish->getIngredientsId();

        $ingredientsDataProvider = new ActiveDataProvider([
            'query' => Ingredient::find(),
        ]);

        // TODO: check all ingredients from $ingredients_for_dish

        return $this->render('admin/dish_ingredients', [
            'ingredientsDataProvider' => $ingredientsDataProvider,
            'ingredients_for_dish' => $ingredients_for_dish,
            'dish' => $dish,
        ]);
    }

    public function actionDish_submit_ingredients()
    {
        if(Yii::$app->user->isGuest || !Yii::$app->user->identity->isAdmin)
            $this->redirect(Yii::$app->urlManager->createUrl('site/index'));

        $selection = Yii::$app->request->post('selection');
        if ($selection == null)
            $selection = [];

        $dish_id = Yii::$app->request->post('dish_id');
        if ($dish_id == null)
            return $this->redirect(Yii::$app->urlManager->createUrl('dish/index'));

        Dishingredientlink::deleteAll(['dish_id' => $dish_id]);

        foreach ($selection as $i => $ingr_id) {
            $model = new Dishingredientlink();
            $model->dish_id = $dish_id;
            $model->ingredient_id = $ingr_id;

            $model->save();
        }

//        return $this->render('debug',[
//            'debug_data' => $selection,
//        ]);

        return $this->redirect(Yii::$app->urlManager->createUrl('dish/index'));
    }

    public function actionDishgenerator() {
        if(Yii::$app->user->isGuest || !Yii::$app->user->identity->isAdmin)
            $this->redirect(Yii::$app->urlManager->createUrl('site/index'));

        $ingredients = Ingredient::find()->all();

        for($d=0; $d < 20; $d++) {
            $dish = new Dish();
            $dish->name = 'Autogenerated dish #'.$d;
            $dish->save();

            $cnt = 0;
            while($cnt == 0) {
                for ($i = 0; $i < 5; $i++) {
                    if (rand(0, 1) == 1) {
                        $r = rand(0, count($ingredients) - 1);

                        $lnk = new Dishingredientlink();
                        $lnk->dish_id = $dish->id;
                        $lnk->ingredient_id = $ingredients[$r]->id;
                        $lnk->save();

                        $cnt++;
                    }
                }
            }

        }

        return $this->redirect(Yii::$app->urlManager->createUrl('site/adminpanel'));
    }


    //////////////////////////////////////////////////////////////
    //////////////////////////// USER ////////////////////////////
    //////////////////////////////////////////////////////////////


    public function actionUserpanel()
    {
        if(Yii::$app->user->isGuest)
            $this->redirect(Yii::$app->urlManager->createUrl('site/index'));

        $ingredientsDataProvider = new ActiveDataProvider([
            'query' => Ingredient::find()->where(['is_hidden' => '0']),
        ]);

        return $this->render('user/user_panel', [
            'ingredientsDataProvider' => $ingredientsDataProvider,
        ]);
    }

    public function actionDishoffer()
    {
        if(Yii::$app->user->isGuest)
            $this->redirect(Yii::$app->urlManager->createUrl('site/index'));

        $selection = Yii::$app->request->post('selection');
        if ($selection == null)
            $selection = [];

        // indecies of all selected ingredients
        $selected_ingredients_id = [];
        foreach ($selection as $ingr_id)
            $selected_ingredients_id[] = $ingr_id;

        // string with all selected ingredients
        $ingredients = Ingredient::findAll($selected_ingredients_id);
        $ingredients_string = '';
        foreach ($ingredients as $ingredient) {
            $ingredients_string .= $ingredient->name . ', ';
        }
        $ingredients_string = trim($ingredients_string, ', ');

        // find all dishes with selected ingredients
        $links = Dishingredientlink::findAll(['ingredient_id' => $selected_ingredients_id]);
        $dishes_id = [];
        foreach ($links as $lnk)
            $dishes_id[] = $lnk->dish_id;

        // find all ingredients for finded dishes
        $links = Dishingredientlink::findAll(['dish_id' => $dishes_id]);
        $recipes = [];
        foreach ($links as $lnk) {
            if (!array_key_exists($lnk->dish_id, $recipes))
                $recipes[$lnk->dish_id] = [];
            $recipes[$lnk->dish_id][] = $lnk->ingredient_id;
        }

        // filter dishes to output
        $good_dish_ids = [];
        $lessgood_dish_ids = [];
        foreach ($recipes as $dish_id => $ingredients_id) {
            $ingr_id_intersect = array_intersect($ingredients_id, $selected_ingredients_id);
            // if all ingredients selected
            if ($ingr_id_intersect == $ingredients_id){
                $good_dish_ids[] = $dish_id;
                $lessgood_dish_ids[$dish_id] = count($ingr_id_intersect);
            }
            else if (count($ingr_id_intersect) >= 2) {
                $lessgood_dish_ids[$dish_id] = count($ingr_id_intersect);
            }
        }

        // select list of dishes
        $dishes_order = null;
        if (count($good_dish_ids) > 0) {
            $dishes_id_to_output = $good_dish_ids;
        }
        else if (count($lessgood_dish_ids) > 0) {
            $dishes_id_to_output = array_keys($lessgood_dish_ids);
        }
        else {
            $dishes_id_to_output = [-1]; // hack
        }

//        return $this->render('debug',[
//            'debug_data' => [$dishes_id_to_output, $good_dish_ids, $lessgood_dish_ids],
//        ]);

        // check hiddenly of all ingredients for all dishes
        $hidden_dishes_id = [];
        foreach($dishes_id_to_output as $dish_id) {
            $ingredients = Ingredient::findAll($recipes[$dish_id]);
            foreach ($ingredients as $ingredient) {
                if ($ingredient->is_hidden) {
                    $hidden_dishes_id[] = $dish_id;
                    break;
                }
            }
        }
        // final dishes
        $dishes_id_to_output = array_diff($dishes_id_to_output, $hidden_dishes_id);

        // argument to view
        $dishes = Dish::findAll($dishes_id_to_output);
        $ingredients_for_dishes = Dish::get_ingredients_string_for_dishes($dishes);

        // dishes sort  (Вывести в порядке уменьшения совпадения ингредиентов вплоть до 2­х.)
        usort(
            $dishes,
            function ($a, $b) use ($lessgood_dish_ids) {
                $a = $lessgood_dish_ids[$a->id];
                $b = $lessgood_dish_ids[$b->id];
                return ($a < $b) ? 1 : (($a > $b) ? -1 : 0);
            }
        );
        $dataProvider = new ArrayDataProvider([
            'key'=>'id',
            'allModels' => $dishes,
            'sort' => ['attributes' => ['id', 'name']],
        ]);

        return $this->render('/dish/index', [
            'dataProvider' => $dataProvider,
            'ingredients_for_dishes' => $ingredients_for_dishes,
            'ingredients_string' => $ingredients_string,
        ]);
    }


    //////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout'],
                'rules' => [
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    /**
     * Displays homepage.
     *
     * @return string
     */
    public function actionIndex()
    {
        if(Yii::$app->user->isGuest)
            $redirect_url = Yii::$app->urlManager->createUrl('site/login');
        else if (Yii::$app->user->identity->isAdmin)
            $redirect_url = Yii::$app->urlManager->createUrl('site/adminpanel');
        else
            $redirect_url = Yii::$app->urlManager->createUrl('site/userpanel');

        return $this->redirect($redirect_url);
    }

    /**
     * Login action.
     *
     * @return string
     */
    public function actionLogin()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            return $this->goBack();
        }
        return $this->render('login', [
            'model' => $model,
        ]);
    }

    /**
     * Logout action.
     *
     * @return string
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

}
